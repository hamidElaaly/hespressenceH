services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - app-network
      - flink-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
      - flink-network
    environment:
      MONGO_INITDB_DATABASE: hespress_db

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: hespress_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
      - flink-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  jobmanager:
    image: flink:latest
    ports:
      - "8081:8081"
      - "6123:6123"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.rpc.port: 6123
        jobmanager.memory.process.size: 1600m
        classloader.resolve-order: parent-first
    volumes:
      - flink_data:/tmp/flink-checkpoints
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - flink-network
    depends_on:
      kafka:
        condition: service_healthy

  taskmanager:
    image: flink:latest
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        taskmanager.memory.process.size: 1728m
        taskmanager.numberOfTaskSlots: 2
        jobmanager.rpc.address: jobmanager
        classloader.resolve-order: parent-first
    volumes:
      - flink_data:/tmp/flink-checkpoints
    networks:
      - flink-network
    depends_on:
      jobmanager:
        condition: service_started

  app:
    build: .
    ports:
      - "5000:5000"  # Add dashboard port
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      jobmanager:
        condition: service_started
      taskmanager:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: ["CMD", "python", "-c", "import http.client; conn = http.client.HTTPConnection('localhost:5000'); conn.request('GET', '/health'); response = conn.getresponse(); exit(0) if response.status == 200 else exit(1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - .:/app
    command: ["python", "-m", "src.main"]
    networks:
      - app-network
      - flink-network
    environment:
      KAFKA_HOST: 'kafka'
      KAFKA_PORT: '9092'
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:9092'
      MONGODB_URI: 'mongodb://mongodb:27017/'
      MONGODB_DB: 'hespress_db'
      FLASK_ENV: 'production'

volumes:
  mongodb_data:
  postgres_data:
  flink_data:
  kafka_data:
  zookeeper_data:

networks:
  app-network:
    driver: bridge
  flink-network:
    driver: bridge
  default:
    name: app-network
    driver: bridge